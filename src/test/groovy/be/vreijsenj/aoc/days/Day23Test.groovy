package be.vreijsenj.aoc.days

import spock.lang.Specification

class Day23Test extends Specification {

    def "returns the longest slippery path with the most beautiful scenery"() {
        given: "the forest map"
            def input = [
                    "#.#####################",
                    "#.......#########...###",
                    "#######.#########.#.###",
                    "###.....#.>.>.###.#.###",
                    "###v#####.#v#.###.#.###",
                    "###.>...#.#.#.....#...#",
                    "###v###.#.#.#########.#",
                    "###...#.#.#.......#...#",
                    "#####.#.#.#######.#.###",
                    "#.....#.#.#.......#...#",
                    "#.#####.#.#.#########v#",
                    "#.#...#...#...###...>.#",
                    "#.#.#v#######v###.###v#",
                    "#...#.>.#...>.>.#.###.#",
                    "#####v#.#.###v#.#.###.#",
                    "#.....#...#...#.#.#...#",
                    "#.#########.###.#.#.###",
                    "#...###...#...#...#.###",
                    "###.###.#.###v#####v###",
                    "#...#...#.#.>.>.#.>.###",
                    "#.###.###.#.###.#.#v###",
                    "#.....###...###...#...#",
                    "#####################.#"
            ]

        when: "evaluating all routes"
            def result = new Day23().runPartOne(input)

        then: "the result matches the example answer"
            result == 94
    }

    def "returns the longest path with the most beautiful scenery"() {
        given: "the forest map"
        def input = [
                "#.#####################",
                "#.......#########...###",
                "#######.#########.#.###",
                "###.....#.>.>.###.#.###",
                "###v#####.#v#.###.#.###",
                "###.>...#.#.#.....#...#",
                "###v###.#.#.#########.#",
                "###...#.#.#.......#...#",
                "#####.#.#.#######.#.###",
                "#.....#.#.#.......#...#",
                "#.#####.#.#.#########v#",
                "#.#...#...#...###...>.#",
                "#.#.#v#######v###.###v#",
                "#...#.>.#...>.>.#.###.#",
                "#####v#.#.###v#.#.###.#",
                "#.....#...#...#.#.#...#",
                "#.#########.###.#.#.###",
                "#...###...#...#...#.###",
                "###.###.#.###v#####v###",
                "#...#...#.#.>.>.#.>.###",
                "#.###.###.#.###.#.#v###",
                "#.....###...###...#...#",
                "#####################.#"
        ]

        when: "evaluating all routes"
        def result = new Day23().runPartTwo(input)

        then: "the result matches the example answer"
        result == 154
    }
}
